#!/bin/sh
#
# bootstrap script to get the tools needed to build the specs within a UNIX shell

export LC_ALL=
export PATH=".:$PATH"
FOUND=
NEEDED=

BOOTSTRAP_MAKE=bootstrap.mak

# Go compiler for mmark

# mmark


check_version() {
    gotver=$2
    gotmajor=`echo $gotver|cut -d. -f1`
    gotminor=`echo $gotver|cut -d. -f2`
    gotmicro=`echo $gotver|cut -d. -f3`
    [ -z "$gotmicro" ] && gotmicro=0
    needmajor=`echo $3|cut -d. -f1`
    needminor=`echo $3|cut -d. -f2`
    needmicro=`echo $3|cut -d. -f3`
    [ -z "$needmicro" ] && needmicro=0
    if [ "$needmajor" -ne "$gotmajor" \
         -o "$needmajor" -eq "$gotmajor" -a "$needminor" -gt "$gotminor" \
         -o "$needmajor" -eq "$gotmajor" -a "$needminor" -eq "$gotminor" -a "$needmicro" -gt "$gotmicro" ]
    then
        echo "$1 too old (got $gotver, needed $3)"
        NEEDED="$NEEDED $1"
    else
        FOUND="$FOUND $1"
    fi

}

check() {
if ! $1 --version >/dev/null 2>&1 && ! $1 -version >/dev/null 2>&1
then
    echo "$1 not found"
    NEEDED="$NEEDED $1"
else
    # found, need to check version ?
    if [ -z "$2" ];then
        FOUND="$FOUND $1"
    else
        gotver=`$1 --version | head -1 | sed s/'.* '//`
        check_version $1 $gotver $2
    fi
fi
}

# check make
check mmark 2.1.1
check xml2rfc 2.30.0

DEPS_ONLY="go"

cat > $BOOTSTRAP_MAKE << EOF
PREFIX=\$(abspath ./build)
EOF

for t in $FOUND; do
    echo ".$t:" >> $BOOTSTRAP_MAKE
done

for t in $NEEDED; do
    echo .$t: .build$t >> $BOOTSTRAP_MAKE
    case "$t" in
        *$DEPS_ONLY*)
            ;; # Dependency only, not build by default
        *)
            PACKAGES="$PACKAGES $t"
            TARGETS="$TARGETS .build$t"
            ;;
    esac
done

[ -n "$PACKAGES" ] && mkdir -p build/bin && echo "To-be-built packages: $PACKAGES"

cat >> $BOOTSTRAP_MAKE << EOF
all: $TARGETS
	@echo "You are ready to build EBML specifications"

include tools.mak
EOF

make -f $BOOTSTRAP_MAKE
